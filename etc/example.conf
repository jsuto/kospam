; This is an example config with default values
; Attention: do _not_ use whitespace between keys and values

; verbosity level. The more logging the greater load
; 1: normal
; 3: info
; 5: debug
verbosity=1

; clapf daemon will use this user (and its group)
; it it was started by root
username=clapf

; if you are using an extended latin character set, eg. hu_HU, than
; set this variable. It will help to reassemble words.
;locale=

; SMTP HELO identification string
hostid=av-engine.localhost

; write pid file
pidfile=/var/run/clapf/clapf.pid

; clapf will listen here
listen_addr=127.0.0.1
listen_port=10025

; where postfix is waiting for connections from clapf
postfix_addr=127.0.0.1
postfix_port=10026

; pass spam to this smtp server. If you have one computer set these variables
; to the same values as postfix_addr and postfix_port.
spam_smtp_addr=127.0.0.1
spam_smtp_port=10026

; let spamdrop use this delivery agent to deliver the message.
; Specify the '-d' option (ie. spamdrop -d) to enable this
; feature
delivery_agent=/usr/sbin/sendmail -oi -f

; where avast! is waiting for us
avast_addr=127.0.0.1
avast_port=5036

; path to the avast! home personal edition binary
avast_home_cmd_line=/usr/bin/avast

; where Kaspersky's aveserver is waiting for us
kav_socket=/var/run/aveserver

; where Dr.Web is waiting for us
drweb_socket=/var/drweb/run/.daemon

; where clamd is waiting for us
; if you want to use clamd over a TCP connection instead
; the Unix domain socket, then uncomment the following
; two lines.
;clamd_addr=127.0.0.1
;clamd_port=3310
clamd_socket=/tmp/clamd

; whether to always virus scan the message (1) or
; scan only if it has a base64 encoded attachment (0).
; if you want clamav to catch phishing letters as
; viruses enable this feature.
; The default is to scan always.
always_scan_message=1

; how many seconds a child process is allowed to run before killed by force
; it should be greater than lmtp_connection_reuse_time_limit (300s by default)
session_timeout=420

; max. number of connections. This value should be greater than the max. number
; of connections postfix will make (by default 20) to clapf
max_connections=30

; the 2nd parameter of the listen() system call. Please note that this is set
; when clapf starts up and you should restart clapf if you change this variable.
; Please also note that the meaning of this variable depends on your Unix implementation
backlog=20

; uncomment this if you are using clamd and run clapf inside a chroot()'ed environment
; to let clapf pass the *real* path of the queue file to clamd. Thus you don't have
; to run clamd inside the jail. Do not forget the trailing '/'!
;chrootdir=/myjail/

; clapf puts its temporary files here
workdir=/var/lib/clapf/tmp

; clapf link()'s the temp file here to implement the queue directories
queuedir=/var/lib/clapf/queue

; if this variable is set (it is not by default) clapf will
; move every virus infected message to this directory
quarantine_dir=

; email address of the local postmaster. If you set this variable then
; this address will get a notification email if a virus infected email
; arrives (this feature is disabled by default)
localpostmaster=


; to enable the trap addresses edit and uncomment the following line
;blackhole_email_list=trapaddress1@domain trapaddress2@domain


; whether to return 550 error code and let the virus infected message
; bounced back (0), or send back a 250 ok code and drop the infected letter (1)
silently_discard_infected_email=1

; whether you want to deliver virus infected emails.
; Warning! If you enable (1) this feature, clapf will
; deliver all the malware to the user.
deliver_infected_email=0

; a comma separated list of IP-addresses of your relay hosts
; A very basic set of patterns are supported, eg. if you want
; clapf to skip 195.56.111.1-255 and 84.15.1.8[0-9]
; in the Received: lines, then set the following:
; skipped_received_ips=195.56.111.,84.15.1.8
;
; The following line would match on 84.15.1.8, but not on
; 84.15.1.80-84.15.1.89!
; skipped_received_ips=84.15.1.8$
;
; please note that "127.,10.,192.168.,172.16." is explicitly
; appended to the list
skipped_received_ips=

; a comma separated list of IP-addresses that clapf "your network"
;
; If the SMTP client host (ie. the host connects to postfix) is on
; "mynetwork", then clapf will not check its spamicity.
;
; If the client IP-address matches "mynetwork", clapf will add
; "<clapf-header-field>: mynetwork" to the message header.
;
; Note that clapf checks for viruses even in emails coming from "mynetwork"
;
; The format of this variable is the same as "skipped_received_ips",
;
; By default clapf fills the client address field with "null", ie. a 4
; character long string. So if you don't need any spam filtering when
; the XFORWARD info is missing, set this: mynetwork=null
;
; if you want to skip spam checking for all emails coming from the
; localhost, eg. your webmail, then set "mynetwork=127.$".
;
; To use this feature, you have to activate XFORWARD in postfix, ie.
; /etc/postfix/main.cf:
;
;lmtp_send_xforward_command = yes
;smtp_send_xforward_command = yes
;smtpd_authorized_xforward_hosts = 127.0.0.0/8
;
mynetwork=

; what to do with a message that came from a zombie host like
; ip-1.2.3.4.adsl.isp.net.
; 0: let the antispam engine handle it (default)
; 1: mark it as spam, and skip the antispam check
; 2: drop it
;
; look at the zombienets.regex file to find out what sender hosts
; clapf considers as part of a zombie network
message_from_a_zombie=0


;
; memcached stuff
;

; memcached server to use. Currently clapf support only 1 memcached server
memcached_servers=127.0.0.1

; ttl (in secs) of a stored object
; 0 means records don't expire
memcached_ttl=86400

; whether to update counters to memcached (1) or to the database (0)
update_counters_to_memcached=0

; interval to sync memcached data (eg. counters) to database
; this setting is only effective if you have update_counters_to_memcached=1
;
; hint: if you are using a mysql replicated environment and you do _not_ want
; clapf to write to the replicated database (because you do sync it some other
; way to the master database or you are not interested in keeping the counters
; persistantly at all), then specify a big number here, that fits to the 
; "long int" size, eg. 2147483647
memcached_to_db_interval=900


;
; antispam stuff
;

; enable the anti-spam decision mechanism (1) or not (0)
; if *not* enabled, clapf will always assign 0.5 as the spamicity value
; if you have not compiled anti-spam support don't care about this
use_antispam=1

; if the sender of the email (From: ...) has sent us at least 10
; good emails and 0 spam then whitelist his further emails. If he
; becomes a spammer just train his letter and he's removed from
; the automatic whitelist. use 0 to disable this feature.
enable_auto_white_list=1

; if uncommented, clapf will insert this header to every email
; to help us to detect that this is a backscatter spam, or it's
; really our mail bounced back. You should define a full header
; line and you are encouraged to customise this value.
;our_signo=X-Anti-Backscatter: xxxxxxxx

; Robinson 's' and 'x' parameters
; You may try 0.1 or even 0.0178 for rob_s.
rob_s=1
rob_x=0.52

; effective size factor to help to handle the redundancy caused by
; overlapping tokens. By default both esf_h and esf_s are set to 1
; which means this feature is disabled. You might test what values
; are good for you
esf_h=1
esf_s=1

; The Spambayes and Bogofilter teams have pointed out that excluding the
; probabilities near 0.5 is useful. You may get rid of the neutral tokens
; with the exclusion radius. The default value (0.1) means that probabilities
; between 0.4-0.6 are excluded.

; The inverse chi square algorithm should use not the 15 most interesting
; as with the Bayesian method, but all the tokens above a certain significance.
; This can be adjusted by the exclusion_radius parameter. If you set it to 0.375,
; then we will include all the tokens with spamicity 0...0.125 or 0.875...1.000.
exclusion_radius=0.375

; skip spam test if the message size is greater than this value (in bytes)
; the default (0) means no such a limit
max_message_size_to_filter=65535

; though some spams have a few words they may be bigger than 'max_message_size_to_filter'
; due to their attachment. So clapf will spam check these emails if they are
; bigger than 'max_message_size_to_filter' AND have less tokens than
; 'max_number_of_tokens_to_filter'.
max_number_of_tokens_to_filter=2000

; whether to penalize the email containing images (1) or not (0).
; It may help you to fight image based spam. If set and finds an
; image, a special spammy token is created (IMAGE*). Only one IMAGE*
; token is created even if the message has multiple images.
penalize_images=0

; whether to add an additional penalty to emails having embedded images (1)
; or not (0). Embedded images has the src=cid:xxxxx sequence and pointing
; to the attached image. If set and finds an embedded image, a special
; spammy token is created (EMBED*). Only one EMBED* token is created
; even if the message has multiple images.
penalize_embed_images=0

; a similar directive like 'penalize_images', except this one cares about
; octet stream attachments. If enabled (1) it may help you to fight PDF spam.
penalize_octet_stream=0

; if the message has an embedded image _and_ its spamicity value is _above_
; max_ham_spamicity (see below), the message is marked as spam

; SURBL domain. It's a kind of RBL list. URLs in the incoming messages
; can be checked against the SURBL database. If found a special spammy
; token is created thus the overall spamicity will be higher
; I know another domain - multi.uribl.com - you may use as well as your
; own rbl domain if you have any. You may query multiply RBL lists by
; a comma separated list of domains, like
; surbl_domain=multi.surbl.org,multi.uribl.com,uris.yourdomain.name.here
surbl_domain=multi.surbl.org

; if clapf is unsure about the message (ie. its spamicity is above the
; max_ham_spamicity and below the spam_overall_limit), it will query
; the given RBL lists, and if the sending host is found on them, clapf
; will mark the message as spam. Uncomment this if you want to disable
; this feature.
rbl_domain=zen.spamhaus.org

; custom header field inserted into the message. Note the trailing space!
clapf_header_field=X-Clapf-spamicity: 

; custom header line to insert to spam messages
; Format: <header name>: <value>
clapf_spam_header_field=X-Clapf-spamicity: Yes

; You may define additional header fields to help "less advanced" mailer
; applications, eg. Outlook Express to recognise spam. If your users use
; OE you may use the following fields. For more information, see
; http://wiki.apache.org/spamassassin/OeFilter.
; If you want OE compatibility uncomment the following lines:
;clapf_spam_header_field=X-Priority: 5
;clapf_spam_header_field=Priority: Non-Urgent
;clapf_spam_header_field=Importance: low
;clapf_spam_header_field=X-MSMail-Priority: Low

; put this prefix to the Subject: line if the message is spam
; note the trailing space!
spam_subject_prefix=[sp@m] 

; put this prefix to the Subject: line if the message is not
; evaluated as spam, but it's probability is >possible_spam_limit
; note the trailing space
possible_spam_subject_prefix=[spam???] 

; see the explanation above. The only difference is that
; this goes to the mail header
clapf_possible_spam_header_field=X-Clapf-spamicity: maybe

; the message is marked as spam if its spamicity value is above this limit
; actually this can be anywhere above 0.9. If your ham-spam data is good
; your spamicity values are expected around 0.001 and 0.999.
; You may try as low as 0.9
spam_overall_limit=0.92

; a ham message has at most this high spam probability
max_ham_spamicity=0.45

; if the spamicity of the message exceeds this threshold clapf will
; drop the message after accepting it. You may use this feature to
; prevent spam to land in the mailbox of your users. If you enable
; this feature, you should let the spam stored in the spam quarantine.
;
; This may be used on smtp relays where you want to eliminate
; _outgoing_ spam.
;
; By default this feature is disabled as the limit is set to 1.01.
; To enable it set it between ${spam_overall_limit} and 0.9999
spaminess_oblivion_limit=1.01

; see possible_spam_subject_prefix for explanation
possible_spam_limit=0.8

spaminess_of_strange_language_stuff=0.9876
spaminess_of_blackholed_mail=0.9995
spaminess_of_caught_by_rbl=0.9998
spaminess_of_caught_by_surbl=0.9997
spaminess_of_embed_image=0.9994

; a group may be either shared (0) or merged (1). A shared group is useful
; when all the users have similar email patterns. The merged group consists
; of a global database (with uid=0) and all users may train the token database
; with their own data. Clapf will then merge these two datasets at run time.
; You may achieve greater accuracy while personal data requires more space
group_type=1

; the training mode may be either Train On Error (0) or Train Until Mature (1)
; Users may train the token database (only) when an error occurs (=TOE). With
; TUM mode, however, clapf will automatically trains those tokens not mature
; enough (ie. having less then 50 hits in the token table). Though TUM has
; a shorter learning curve, but it produces more tokens in the database, so
; it will be larger than with TOE.
training_mode=0


; enable this (by setting to 1) if you do not want to perform an initial training
; and let clapf autolearn the first 1000 ham and spam messgaes. Of course you
; have to correct its training errors. By default you are expected to do an
; initial training
initial_1000_learning=0


; you can enable (1) or disable (0) the update of the token timestamps.
; Disabling the token update is useful if you do not want to run the
; periodic purge script, and you want to spare the UPDATE t_token ....
; SQL command. Oherwise leave the default setting, ie. enabled (=1).
update_tokens=1


; whether to store the email with some metadata to the database (1) or not (0)
; by default we store the email for later training
store_metadata=1

; whether to store only spam emails (1) or not (0). It is only affected if
; store_metadata=1
store_only_spam=0


;
; foreign language stuff
;

; if you want to replace junk (eg. Chinese, Korean, Japanese, ...
; characters to 'j' then set 1 (default), otherwise set 0.
replace_junk_characters=1

; if the number of invalid characters (look ijc.h) reach this limit
; mark the message as spam. Set to 0 to disable this feature
invalid_junk_limit=5

; if the number of lines in a strange language reach this limit
; mark the message as spam. Set to 0 to disable this feature
invalid_junk_line=1

;
; libclamav stuff
;

; whether to mark archives as viruses (1) or not (0) if maxfiles,
; maxfilesize, or maxreclevel limit is reached.
use_libclamav_block_max_feature=1

; max. number of files scanned within the archive
clamav_maxfile=100

; archived files larger than this value will not be scanned
clamav_max_archived_file_size=31457280

clamav_max_recursion_level=5
clamav_max_compress_ratio=200

; whether to treat encrypyed archives as a virus (1) or not (0)
clamav_block_encrypted_archives=1

; whether to load the phishing database (1) or not (0)
clamav_use_phishing_db=1

;
; mysql stuff
;

;mysqlhost=127.0.0.1
;mysqlport=3306
mysqlsocket=/tmp/mysql.sock
mysqluser=clapf
mysqlpwd=changeme
mysqldb=clapf
mysql_connect_timeout=2

;
; postgresql stuff
;

psqlhost=127.0.0.1
psqlport=5432
psqldb=clapf
psqluser=clapf
psqlpwd=changeme
psql_connect_timeout=2

;
; sqlite3 stuff
;

; If you are using spamdrop (not the clapf daemon), you have two options:
; 1. You may specify this variable, then every user will share this token
; database (=shared database) OR
; 2. comment this variable out, and spamdrop will figure out where the users'
; individual token databases are.
sqlite3=/var/lib/clapf/data/tokens.sdb

; set sqlite3 pragma, see http://www.sqlite.org/pragma.html for more details
; possible values are:
; PRAGMA synchronous = FULL
; PRAGMA synchronous = NORMAL
; PRAGMA synchronous = OFF
sqlite3_pragma=PRAGMA synchronous = OFF

;
; mydb stuff
;

; If you are using spamdrop (not the clapf daemon), you have two options:
; 1. You may specify this variable, then every user will share this token
; database (=shared database) OR
; 2. comment this variable out, and spamdrop will figure out where the users'
; individual token databases are.
mydbfile=/var/lib/clapf/tokens.mydb




; SpamAssassin's spamd support

spamd_addr=127.0.0.1
spamd_port=783
spamc_user=spamc


;
; history
;

; name of path of the history database. If it has a slash (/)
; character, then it's considered as an SQLite3 database,
; otherwise as a mysql database.
historydb=historydb

; pidfile of the maillog.pl script. Give proper permissions
; to maillog to create the pidfile
historypid=/var/run/clapf/history.pid

; path to the mail log
maillog=/var/log/maillog

; cron scripts will retain data in cache and queue for
; 14 days by default
days_to_retain_quarantine_data=14

; days to retain history data, 30 days by default
days_to_retain_history_data=30

