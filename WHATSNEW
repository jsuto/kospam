0.4.1:
------

PIPELINING support.

Enhanced webui supporting mass operations (message delivery,
training, user editing, etc.).

The webui displays a formatted view of the email. The raw
email is also available as an option.

Optimized antivirus engine utilization.

Revised and smarter message store even in a distributed
environment.

Added some configuration file options suitable for high
performance installations.

Flexible webui authentication.

Email address blacklist feature similare to the whitelist.

You can specify what uid/gid clapf will run.

Added a graphical representation of the per user statistics.

Updated libclamav interface due to changes in the clamav API.

An Outlook hack is added to support the training of Outlook
users.

0.4.0:
------

Fully functional web ui that supports both MySQL and LDAP.

Policy support.

Template based virus notifications.

Added training support to the spam quarantine.

Redesigned token query/update.

0.3.31:
-------

Added an experimental language detection. See contrib/i18n for
more details.

Added a kind of backscatter detection using a special email header.

Extended whitelist supports.

Implemented a primitive token reassembly logic to get 'Cialis'
from 'C i a l i s'. To use it, set the locale variable in clapf.conf.

If you are running clapf in daemon mode, you can forward messages to
be trained to ham@yourdomain and spam@yourdomain too.

Redesigned the username/uid vs. email address query. You can store
these assignments in either a mysql database or in an LDAP database/Active
Directory.

Added a new web UI replacing the cgi applications. The LDAP admin part
is not ready yet, but it's pretty usable. And much nicer.

Temporarily disabled the qcache and external store support as they need
further review to work with this release.

0.3.30:
-------

Silently discard virus infected emails.

Removed the attachment analyse code (too costly).

Added a query cache (qcache) to speed up the spamicity query
from MySQL or SQLite3 databases.

You can choose whether to use LMTP or SMTP local delivery.

Removed the --disable-antispam option. The configure script will exit
if you do not specify neither an antivirus package nor a tokendb type.

Removed CDB support.

Smarter configure script and Makefile.

Added a lower cutoff value: max_ham_spamicity (it obsoletes
the max_junk_spamicity and max_embed_image_spamicity
variables).

Added blacklist support.

Added an autolearning feature. Set initial_1000_learning=1 in clapf.conf
if you do not want to perform an initial training for any reason.

Reverting the storage of messages. Instead of putting them to the
SQL table, they are stored in a per user directory.

No need to use maildrop unless using virtual users with spamdrop.

Polished log levels.

Retraining is integrated to clapf and spamdrop.

The blackhole (aka. minefield) is handled by spamdrop.

Added XFORWARD extension support to catch DHA attacks.

Changed the t_token table to InnoDB to handle better paralel requests.

Added administrative support to spam quarantine, ie. the admin user
can review the spam quarantine of any user.

Unified surbl and rbl support.

Training function merged into spamdrop:
spamdrop -S < rfc822_format_message
spamdrop -H < rfc822_format_message

Spamdrop can handle blackhole requests (with a symlink).

Added whitelist support (use --enable-whitelist option with configure)

Modified the t_token sql table to store a timestamp for each token.
This can be used to purge aged, obsolete tokens, while keeping the
useful tokens, and maintain accuracy.

You may have to modify your existing t_token table as follows:

alter table t_token add column timestamp int default 0;
update t_token set timestamp=UNIX_TIMESTAMP();

OR

alter table t_token add column timestamp int default 0;
update t_token set timestamp=THE_CURRENT_TIME_STAMP*

*: replace with the current timestamp, eg. 1203934109

Then you can purge the unused tokens with purge-mysql.sql
or purge-sqlite3.sh scripts.


Other small fixes.

0.3.29:
-------

Added new directives to fight image spam.

Unified syslog messages.

Enhanced inverse chi-square implementation.

Better parser algorithm.

Exclude neutral tokens around a configurable radius.

Improved spam quarantine.

Removed openssl dependency.

0.3.28:
-------

Spam can be marked in the subject line too.

Skip the names of the months while parsing the message.

Image / word .doc spam can be recognised via external applications
such as gocr/netpbm and catdoc.

Added Maildir support for creating the token database.

Localisation is supported with your messages.xx.h file.

Better spam quarantine (paging available).

The blackhole feature does not use any mysql stuff any longer.

The memory hash db has a smaller footprint.

Binary messages (particularly those containing NUL characters) are
handled properly.

The CDB_File Perl module is not needed any longer. Use the cdb
utility (part of the tinycdb package).

Images can be penalized in the message assigning a special spammy
token. Embedded images may have an extra penalty to avoid unnecessary
OCR processes.

0.3.27:
-------

Multiple header lines can be inserted to spam messages. At least
one clapf_spam_header_line instance should be defined.

Active Directory support via openldap.

Spam can be directed to a different smtp server.

Created the spamdrop utility can be used with an LDA such as maildrop.
Spamdrop returns 1 in case of spam and otherwise 0.

Clapf can connect to a MySQL server via unix domain socket too.

Modified the surbl code to prevent unnecessary lookups.

The configure script has better mysql handling.

The ESF code is disabled by default (esf_h = esf_s = 1). You may
adjust these variables for your needs.

The configure script detects the GNU GSL library and uses its chi-square
implementation. Otherwise the internal chi-square function is used.

Three more characters added to the invalid_junk_characters array.

0.3.26:
-------

Added SURBL support.

User preferences are stored in LDAP directory or MySQL database.
They can manage their own preferences via CGI.

Redesigned the spam quarantine. Users may manage their own spam and
determine what to do with it (drop, move into the quarantine or
deliver it into their junk folder).

Tokens are all lower cased.

Invalid characters are replaced to see the message on the terminal.

