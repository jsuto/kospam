AC_INIT(clapf.c)
AM_CONFIG_HEADER(clapf-config.h)

dnl Checks for programs.
AC_PROG_CC
AM_PROG_CC_STDC
AC_PROG_MAKE_SET
AC_PROG_INSTALL

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(sys/socket.h sys/time.h syslog.h signal.h ctype.h unistd.h)


AC_SUBST(defs)
AC_SUBST(INCDIR)
AC_SUBST(LIBDIR)
AC_SUBST(OBJS)
AC_SUBST(CLAPF_USER)
AC_SUBST(parsembox)
AC_SUBST(clapfstore)
AC_SUBST(clapfstore_install)
AC_SUBST(parsembox_install)
AC_SUBST(spamdrop)
AC_SUBST(spamdrop_install)
AC_SUBST(preparesql)
AC_SUBST(test)
AC_SUBST(mysql_includes)
AC_SUBST(mysql_libs)
AC_SUBST(user_obj)
AC_SUBST(ldap_libs)
AC_SUBST(mysql_obj)
AC_SUBST(store_obj)
AC_SUBST(db_install)
AC_SUBST(spamsum_libs)
AC_SUBST(spamsum)
AC_SUBST(spamsum_install)
AC_SUBST(qcache)
AC_SUBST(libclamav_extra_libs)


have_libclamav="no"
have_clamd="no"
have_avg="no"
have_avast="no"
have_kav="no"
have_drweb="no"

have_antivirus="no"
have_antispam="no"
have_blackhole="no"
have_spamdrop="no"
have_mysql="no"
have_sqlite3="no"
have_ldap="no"
have_rbl="no"
have_all_received="no"
have_gsl="no"
have_store="no"
have_whitelist="no"
have_case="no"
have_policy="no"
have_qcache="no"


have_static_build="no"

antispam_libs=""
defs=""
objs=""
user_obj=""
mysql_obj=""
ldap_libs=""
sqlite3_libs=""
spamsum_libs=""
os=`uname -s`

want_language_detection="no"


dnl static build

AC_ARG_ENABLE(static-build,
          [  --enable-static-build   build statically linked executables (default: dynamically linked)], have_static_build=$enableval, have_static_build="no")


dnl clamav

AC_ARG_ENABLE(libclamav,
	[  --enable-libclamav      build libclamav antivirus support], want_clamav=$enableval, want_clamav="no")

   if test "$want_clamav" = "yes"; then

	AC_CHECK_HEADERS(clamav.h, have_libclamav=yes, have_libclamav=no)
	AC_HAVE_LIBRARY(clamav, AC_CHECK_LIB(clamav, cl_scanfile, have_libclamav=yes, have_libclamav=no))

	if test "$have_libclamav" = "no"; then
   	   echo "clamav not found";
   	   exit 1;
	fi

        have_antivirus="yes"
   fi

dnl clamd


AC_ARG_ENABLE(clamd,
	[  --enable-clamd          build clamd antivirus support], want_clamd=$enableval, want_clamd="no")
   if test "$want_clamd" = "yes"; then
      have_clamd="yes"
      have_antivirus="yes"
   fi


dnl avast!

AC_ARG_ENABLE(avast,
         [  --enable-avast          build avast! antivirus support], want_avast=$enableval, want_avast="no")

    if test "$want_avast" = "yes"; then
       have_avast="yes"
       have_antivirus="yes"
    fi


dnl KAV

AC_ARG_ENABLE(kav,
         [  --enable-kav            build Kaspersky antivirus support], want_kav=$enableval, want_kav="no")

    if test "$want_kav" = "yes"; then
       have_kav="yes"
       have_antivirus="yes"
    fi



dnl Dr.Web

AC_ARG_ENABLE(drweb,
         [  --enable-drweb          build Dr.Web antivirus support], want_drweb=$enableval, want_drweb="no")

    if test "$want_drweb" = "yes"; then
       have_drweb="yes"
       have_antivirus="yes"
    fi


dnl use whitelist

AC_ARG_ENABLE(whitelist,
	[  --enable-whitelist      use whitelist], want_whitelist=$enableval, want_whitelist="no")

   if test "$want_whitelist" = "yes"; then
      have_whitelist="yes"
   fi


dnl use case sensitive tokens

AC_ARG_ENABLE(case,
        [  --enable-case           use case sensitive tokens], want_case=$enableval, want_case="no")

   if test "$want_case" = "yes"; then
      have_case="yes"
   fi


dnl antispam feature

dnl AC_ARG_ENABLE(antispam,
dnl       [  --disable-antispam      do not build antispam support], want_antispam=$enableval, want_antispam="yes")

dnl  if test "$want_antispam" = "yes"; then

    dnl math library

    AC_CHECK_HEADERS(math.h, have_math=yes, have_math=no)
    AC_HAVE_LIBRARY(m, AC_CHECK_LIB(m, fabs), have_math=yes, ""; exit)

    dnl have_antispam="yes"

    antispam_libs="-lm"

    dnl mysql database

    dnl AC_CHECK_PROG(MYSQL_CONFIG, mysql_config, yes)

    dnl if test x$MYSQL_CONFIG = xyes; then
    dnl   have_mysql="yes"
    dnl fi

    dnl ldap database

    AC_CHECK_HEADERS(ldap.h, have_ldap=yes, echo "ldap.h is not found")
    AC_HAVE_LIBRARY(ldap, AC_CHECK_LIB(ldap, ldap_simple_bind_s, have_ldap=yes, echo "libldap.so is not found"; have_ldap=no))


    dnl (su)rbl support

    AC_ARG_ENABLE(rbl,
          [  --enable-rbl            use the (SU)RBL database], want_rbl=$enableval, want_rbl="no")

    if test "$want_rbl" = "yes"; then
       have_rbl="yes"
    fi


    dnl whether to check all "Received: from" lines having IP-addresses

    AC_ARG_ENABLE(all-received,
          [  --enable-all-received   check all the IP-addresses from "Received: from ..." lines against blacklists], want_all_received=$enableval, want_all_received="no")

    if test "$want_all_received" = "yes"; then
       have_all_received="yes"
    fi


    dnl gsl support

    AC_CHECK_HEADERS(gsl/gsl_cdf.h, have_gsl=yes, echo "gsl_cdf.h is not found")

    if test "$have_gsl" = "yes"; then
       defs="$defs -DHAVE_GSL"
       gsl_libs="-lgslcblas -lgsl"
    fi


    dnl the blackhole feature

    AC_ARG_ENABLE(blackhole,
          [  --enable-blackhole      build the blackhole feature], want_blackhole=$enableval, want_blackhole="no")

    if test "$want_blackhole" = "yes"; then
       have_blackhole="yes"
       echo "So you've selected the blackhole feature ... good"
    fi


AC_ARG_WITH(userdb,
[  --with-userdb[[=mysql|ldap]]      use either ldap or mysql database holding user data (default: none)],[
  if test "$withval" != "no" -a "$withval" != "yes"; then
    USERDB=$withval
  fi

  if test "$withval" = "mysql"; then
     AC_CHECK_PROG(MYSQL_CONFIG, mysql_config, yes)

     if test x$MYSQL_CONFIG = xyes; then
       have_mysql="yes"
     fi

     if test "$have_mysql" = "yes"; then
            dnl AC_DEFINE(USE_MYSQL, 1, [MySQL database support enabled])

            mysql_includes=`mysql_config --cflags`
            mysql_libs=`mysql_config --libs_r`
     else
        echo "MySQL support is not found"
        exit 1;
     fi
   fi

  if test "$withval" = "sqlite3"; then
    AC_CHECK_HEADERS(sqlite3.h, have_sqlite3=yes, echo "sqlite3.h is not found")

    AC_HAVE_LIBRARY(sqlite3, AC_CHECK_LIB(sqlite3, sqlite3_open, have_sqlite3=yes, have_sqlite3=no))

      if test "$have_sqlite3" = "no"; then
           echo "sqlite3 not found";
           exit 1;
      fi
  fi

])



dnl message store

AC_ARG_WITH(store,
[  --with-store[[=mysql|fs]]         use either mysql database or the local filesystem to keep emails (default: none)],[
  if test "$withval" != "no" -a "$withval" != "yes"; then
    STORE=$withval
  fi

  if test "$withval" = "mysql"; then
     AC_CHECK_PROG(MYSQL_CONFIG, mysql_config, yes)

     if test x$MYSQL_CONFIG = xyes; then
       have_mysql="yes"
     fi

     if test "$have_mysql" = "yes"; then
            dnl AC_DEFINE(USE_MYSQL, 1, [MySQL database support enabled])

            mysql_includes=`mysql_config --cflags`
            mysql_libs=`mysql_config --libs_r`
     else
        echo "MySQL support is not found"
        exit 1;
     fi
   fi

])



dnl the blackhole feature

AC_ARG_ENABLE(policy,
      [  --enable-policy         enable the policy feature], want_policy=$enableval, want_policy="no")

if test "$want_policy" = "yes"; then
    have_policy="yes"
fi


AC_ARG_WITH(tokendb,
[  --with-tokendb[[=mysql|sqlite3]]  use either mysql or sqlite3 database holding tokens (default: none)],[
  if test "$withval" != "no" -a "$withval" != "yes"; then
    TOKENDB=$withval
  fi

  have_antispam="yes"

  parsembox="parsembox"
  parsembox_install="install-parsembox"

  if test "$withval" = "sqlite3"; then
    AC_CHECK_HEADERS(sqlite3.h, have_sqlite3=yes, echo "sqlite3.h is not found")

    AC_HAVE_LIBRARY(sqlite3, AC_CHECK_LIB(sqlite3, sqlite3_open, have_sqlite3=yes, have_sqlite3=no))

      if test "$have_sqlite3" = "no"; then
           echo "sqlite3 not found";
           exit 1;
      fi

    have_spamdrop="yes"
    parsembox="$parsembox"
    preparesql="prepare-sql aphash "
    spamdrop="spamdrop"
    spamdrop_install="install-spamdrop"

    test="test"
  fi


  if test "$withval" = "mysql"; then

     AC_CHECK_PROG(MYSQL_CONFIG, mysql_config, yes)

     if test x$MYSQL_CONFIG = xyes; then
       have_mysql="yes"
     fi

     if test "$have_mysql" = "yes"; then
            dnl AC_DEFINE(USE_MYSQL, 1, [MySQL database support enabled])

            mysql_includes=`mysql_config --cflags`
            mysql_libs=`mysql_config --libs_r`
            have_spamdrop="yes"
            parsembox="$parsembox"
            preparesql="prepare-sql aphash "
	    spamdrop="spamdrop"
	    spamdrop_install="install-spamdrop"
            db_install="install-mysql-new"

            test="test"
     else
        echo "MySQL support is not found"
        exit 1;
     fi
  fi



  if test "$withval" = "mydb"; then
     have_spamdrop="yes"
     parsembox="$parsembox"
     spamdrop="spamdrop mydb_stat mydb_compress"
     preparesql="prepare-sql aphash"
     spamdrop_install="install-spamdrop"
     test="test"
  fi


  parsembox="$parsembox "


])


dnl lmtp support
    AC_ARG_ENABLE(lmtp,
          [  --enable-lmtp           use LMTP local delivery (default: SMTP)], want_lmtp=$enableval, want_lmtp="no")

dnl language detection
    AC_ARG_ENABLE(language-detection,
          [  --enable-language-detection use the language detection feature (experimental)], want_language_detection=$enableval, want_language_detection="no")


dnl enable spamsum support

    AC_ARG_ENABLE(spamsum,
          [  --enable-spamsum        enable spamsum support (experimental)], want_spamsum=$enableval, want_spamsum="no")

    if test "$want_spamsum" = "yes"; then
       spamsum="spamsum"
       defs="$defs -DHAVE_SPAMSUM"
       spamsum_libs="-lspamsum"
    fi


dnl user running clapf

AC_ARG_WITH(clapf-user,
    [  --with-clapf-user=username      what user the clapf daemon shall be run as],
    [ CLAPF_USER=$withval ],
    [ CLAPF_USER=clapf ]
    )


dnl configure config directory

cfg_dir=`echo $sysconfdir | grep prefix`

if test -n "$cfg_dir"; then
    if test "$prefix" = "NONE"
    then
        cfg_dir="$ac_default_prefix/etc"
        my_prefix=$ac_default_prefix
    else
        cfg_dir="$prefix/etc"
        my_prefix=$prefix
    fi
else
    cfg_dir="$sysconfdir"
fi

CFGDIR=$cfg_dir
AC_SUBST(CFGDIR)
AC_DEFINE_UNQUOTED(CONFDIR,"$cfg_dir",[where to look for the config file])


dnl configure data directory

data_dir=`echo $localstatedir | grep prefix`

if test -n "$data_dir"; then
    if test "$prefix" = "NONE"
    then
        data_dir="$ac_default_prefix/var"
    else
        data_dir="$prefix/var"
    fi
else
    data_dir="$localstatedir"
fi

DATADIR=$data_dir
AC_SUBST(DATADIR)
AC_DEFINE_UNQUOTED(DATADIR,"$data_dir",[where to look for the data files])

dnl spamdrop helper program

    AC_ARG_ENABLE(spamdrop-helper,
          [  --enable-spamdrop-helper use external spamdrop helper program], want_spamdrop_helper=$enableval, want_spamdrop_helper="no")

    if test "$want_spamdrop_helper" = "yes"; then
        defs="$defs -DHAVE_SPAMDROP_HELPER"
    fi


AC_DEFINE_UNQUOTED(SPAMDROP_HELPER_PROGRAM,"$my_prefix/libexec/clapf/spamdrop_helper",[where to look for the spamdrop helper file])
AC_DEFINE_UNQUOTED(VIRUS_TEMPLATE, "$my_prefix/share/clapf/template.virus", [where the virus template is])




if test "x$TOKENDB" = "x" && test "$have_antispam" = "yes"; then echo "please specify the token database with --with-tokendb"; exit 1; fi

dnl tinycdb

if test "$TOKENDB" = "cdb"; then
   AC_CHECK_HEADERS(cdb.h)
   AC_HAVE_LIBRARY(cdb, AC_CHECK_LIB(cdb, cdb_find, have_cdb=yes, echo "you need the cdb package"; exit))
   defs="$defs -DHAVE_CDB"
   objs="$objs cdb.o"
   antispam_libs="$antispam_libs -lcdb"
fi

if test "$TOKENDB" = "sqlite3"; then
   defs="$defs -DHAVE_SQLITE3"
   mysql_obj="sqlite3.o "
fi

if test "$TOKENDB" = "mysql"; then
   defs="$defs -DHAVE_MYSQL"
   mysql_obj="mysql.o "
fi

if test "$TOKENDB" = "mydb"; then
   defs="$defs -DHAVE_MYDB"
   mysql_obj="mydb.o"
fi

if test "x$QCACHE" != "x"; then
   if test "$have_antispam" = "no"; then
      echo "please specify the --with-tokendb option"
      exit 1
   fi
fi

#if test "x$TOKENDB" != "x" && test "x$USERDB" = "x"; then
#   echo "please specify the --with-userdb option"
#   exit 1
#fi

if test "$have_policy" = "yes" && test "x$USERDB" = "x"; then
   echo "please specify the --with-userdb option"
   exit 1
fi

if test "$have_antivirus" = "no" && test "$have_antispam" = "no"; then
   echo "you have not specified either antivirus or antispam support"
   exit 1
fi

dnl let us know if we are building on FreeBSD

if test "$os" = "FreeBSD"; then
   defs="$defs -DFREEBSD"
fi

if test "$os" = "Linux"; then
   defs="$defs -D_GNU_SOURCE"
fi

dnl whether we have antivirus support

if test "$have_libclamav" = "yes" || test "$have_clamd" = "yes" || test "$have_avg" = "yes" || test "$have_avast" = "yes" || test "$have_kav" = "yes"  || test "$have_drweb" = "yes" ; then
   defs="$defs -DHAVE_ANTIVIRUS"
   objs="$objs avir.o"
fi

dnl if we need our mime code

if test "$have_avg" = "yes" ; then
   objs="$objs mime.o"
fi

echo; echo

if test "$have_libclamav" = "yes"; then
   echo "libclamav support: yes"
   libclamav="-lclamav `clamav-config --libs` "
   defs="$defs -DHAVE_LIBCLAMAV"
   libclamav_extra_libs='$(CLAMAV_EXTRA_LIBS)'
fi

if test "$have_clamd" = "yes"; then
   echo "clamd support: yes"
   objs="$objs clamd.o"
   defs="$defs -DHAVE_CLAMD"
fi

if test "$have_avg" = "yes"; then
   echo "AVG support: yes"
   objs="$objs avg.o"
   defs="$defs -DHAVE_AVG"
fi

if test "$have_avast" = "yes"; then
   echo "avast! support: yes"
   objs="$objs avast.o"
   defs="$defs -DHAVE_AVAST"
fi

if test "$have_kav" = "yes"; then
   echo "kav support: yes"
   objs="$objs kav.o"
   defs="$defs -DHAVE_KAV"
fi

if test "$have_drweb" = "yes"; then
   echo "Dr.Web support: yes"
   objs="$objs drweb.o"
   defs="$defs -DHAVE_DRWEB"
fi


if test "$have_antispam" = "yes"; then
   echo "antispam support: yes"
   defs="$defs -DHAVE_ANTISPAM"
   objs="$objs hash2.o bayes.o buffer.o spam.o"
fi


if test "$have_gsl" = "yes"; then
   echo "chi square implementation: GNU GSL"
else
   echo "chi square implementation: internal"
fi

if test "$have_blackhole" = "yes"; then
   echo "blackhole feature: yes"
   defs="$defs -DHAVE_BLACKHOLE"
   objs="$objs black.o"
else
   echo "blackhole feature: no"
fi

if test "$have_rbl" = "yes"; then
   echo "(SU)RBL support: yes"
   defs="$defs -DHAVE_RBL"
   if test "$have_all_received" = "yes"; then
      defs="$defs -DHAVE_PROCESS_ALL_RECEIVED_LINES"
   fi
   objs="$objs rbl.o"
else
   echo "(SU)RBL support: no"
fi

if test "$USERDB" = "mysql" && test "$have_mysql" = "yes"; then
   echo "user database: mysql"
   defs="$defs -DUSERS_IN_MYSQL -DHAVE_USERS"
   objs="$objs users.o"
fi

if test "$USERDB" = "sqlite3" && test "$have_sqlite3" = "yes"; then
   echo "user database: sqlite3"
   defs="$defs -DUSERS_IN_SQLITE3 -DHAVE_USERS"
   objs="$objs users.o"
fi

if test "$USERDB" = "ldap" && test "$have_ldap" = "yes"; then
   echo "user database: ldap"
   defs="$defs -DUSERS_IN_LDAP -DNEED_LDAP -DHAVE_USERS"
   ldap_libs="-lldap -llber"
   objs="$objs users.o"
fi

echo "token database backend: $TOKENDB"


if test "$TOKENDB" = "mysql"; then
   db_install="install-mysql-new"
fi

if test "$TOKENDB" = "sqlite3"; then
   db_install="install-sqlite3"
fi

if test "$STORE" = "mysql"; then
   echo "message store: mysql"
   defs="$defs -DHAVE_STORE -DSTORE_MYSQL"
fi

if test "$STORE" = "fs"; then
   echo "message store: fs"
   defs="$defs -DHAVE_STORE -DSTORE_FS"
fi

if test "$want_spamsum" = "yes"; then
   echo "spamsum: yes"
   spamsum_install="install-spamsum"
else
   echo "spamsum: no"
fi

if test "$have_whitelist" = "yes"; then
   echo "whitelist: yes"
   defs="$defs -DHAVE_WHITELIST"
else
   echo "whitelist: no"
fi

if test "$have_case" = "yes"; then
   defs="$defs -DHAVE_CASE"
   echo "tokens are case sensitive: yes"
else
   echo "tokens are case sensitive: no"
fi

if test "$want_lmtp" = "yes"; then
   echo "local delivery: LMTP"
   defs="$defs -DHAVE_LMTP"
else
   echo "local delivery: SMTP"
fi

if test "$have_policy" = "yes"; then
   defs="$defs -DHAVE_POLICY"
   echo "policy support: yes"
   objs="$objs policy.o"
else
   echo "policy support: no"
fi

if test "$want_language_detection" = "yes"; then
   echo "language detection: enabled"
   defs="$defs -DHAVE_LANG_DETECT"
   objs="$objs lang.o"
else
   echo "language detection: no"
fi

echo "clapf user: $CLAPF_USER"

if test "$have_static_build" = "yes"; then
   echo "link mode: static"
   static="-static"
else
   echo "link mode: dynamic"
fi


if test "$have_mysql" = "yes"; then
   defs="$defs -DNEED_MYSQL"
fi

if test "$have_sqlite3" = "yes"; then
   defs="$defs -DNEED_SQLITE3"
   sqlite3_libs="-lsqlite3 -lpthread"
fi



id -u $CLAPF_USER 2>/dev/null 1>/dev/null
if test $? -eq 1; then echo "the user \"$CLAPF_USER\" does not exists, please create it, first with adduser..."; exit 1; fi

if test "$have_libclamav" = "no" && test "$have_clamd" = "no" && test "$have_avg" = "no" && test "$have_avast" = "no" && test "$have_kav" = "no" && test "$have_drweb" = "no" ; then
   echo; echo
   echo "You have not selected any antivirus support."
   echo "clapf will not protect you from hostile code coming in e-mail"
fi

echo; echo



CFLAGS="$static -O2 -Wall -g"
LIBS="$libclamav $antispam_libs $gsl_libs $sqlite3_libs"
OBJS="misc.o cfg.o smtp.o sig.o decoder.o list.o parser.o session.o templates.o hash.o score.o chi.o $objs"

AC_OUTPUT(Makefile)
AC_OUTPUT(contrib/spamsum/Makefile)
